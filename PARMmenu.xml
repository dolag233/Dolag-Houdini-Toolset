<?xml version="1.0" encoding="UTF-8"?>
<!--
    right-click menu of Dolag tools
-->
<menuDocument>
    <!-- menuDocument can only contain 1 menu element, whose id is 
         implicitly "root_menu"
      -->
    <menu>
        <subMenu id = "h.pane.parms.dolag">
            <label>Dolag</label>
            <insertBefore>revert_to_prev_val</insertBefore>

            

            <scriptItem id = "h.pane.parms.dolag.paste_node_path">
                <expression>
import hou

# 检查是否为字符串参数
if not isinstance(kwargs['parms'][0].parmTemplate(), hou.StringParmTemplate):
    return False

# 检查剪贴板内容是否为有效节点路径
clip = hou.ui.getTextFromClipboard()
if not clip or not clip.strip():
    return False

# 尝试解析为节点，如果成功则认为是有效路径
try:
    node = hou.node(clip)
    return node is not None
except:
    return False
                </expression>
                <label>Paste Node Path</label>
                    <scriptCode><![CDATA[
import hou
from op_menu import node_path

parms = kwargs['parms']
for parm in parms:
    if isinstance(parm.parmTemplate(), hou.StringParmTemplate):
        text = hou.ui.getTextFromClipboard()
        # 直接覆盖式粘贴（Houdini 自定义脚本无法获取光标位置）
        parm.set(text)
        break

                    ]]>
                    </scriptCode>
            </scriptItem>

            <scriptItem id = "h.pane.parms.dolag.paste_relative_node_path">
                <expression>
import hou

# 检查是否为字符串参数
if not isinstance(kwargs['parms'][0].parmTemplate(), hou.StringParmTemplate):
    return False

# 检查剪贴板内容是否为有效节点路径
clip = hou.ui.getTextFromClipboard()
if not clip or not clip.strip():
    return False

# 尝试解析为节点，如果成功则认为是有效路径
try:
    node = hou.node(clip)
    return node is not None
except:
    return False
                </expression>
                <label>Paste Relative Node Path (to This Node)</label>
                    <scriptCode><![CDATA[
import hou
from Dolag import path as dpath

parms = kwargs['parms']
for parm in parms:
    if isinstance(parm.parmTemplate(), hou.StringParmTemplate):
        clip = hou.ui.getTextFromClipboard()
        # 如果剪贴板是绝对路径，转换为相对当前参数所属节点的路径
        try:
            node = parm.node()
            # 使用 Houdini 内置接口
            rel = node.relativePathTo(hou.node(clip)) if clip.startswith('/') else clip
        except Exception:
            # 兜底使用绝对路径原样粘贴
            rel = clip
        parm.set(rel)
        break

                    ]]>
                    </scriptCode>
            </scriptItem>

            <scriptItem id = "h.pane.parms.dolag.menu.open_in_vsc">
                <expression>isinstance(kwargs['parms'][0].parmTemplate(), hou.StringParmTemplate)</expression>
                <label>Edit in VS Code</label>
                    <scriptCode><![CDATA[
import hou
from _utils.open_vex_in_vsc import openParmInVscode

parms = kwargs['parms']

for parm in parms:
    if isinstance(parm.parmTemplate(), hou.StringParmTemplate):
        openParmInVscode(parm, wait=True, write_back=False)

                    ]]>
                    </scriptCode>
            </scriptItem>

            <scriptItem id = "h.pane.parms.dolag.menu.save_snippet">
                <expression>isinstance(kwargs['parms'][0].parmTemplate(), hou.StringParmTemplate)</expression>
                <label>Save Snippet</label>
                    <scriptCode><![CDATA[
import hou
import sys
from parm_menu import save_snippet, save_window
from _utils import show_UI
from _utils.code_type import SnippetType, VexType
from error.error_report import displayError

parms = kwargs['parms']

for parm in parms:
    # just save snippet
    if parm.name() == 'snippet':
        code = parm.unexpandedString()
        if len(code) == 0:
            continue
        
        save_wind = show_UI.showUI(save_window.SaveWindow, SnippetType.vex)
        text = save_wind.getText()
        comment = save_wind.getComment()
        vex_type = save_wind.getVexType()
        if text is None:
            continue

        save_snippet.saveVEXToDisk(text, code, comment, vex_type)

    elif parm.name() == 'python':
        code = parm.unexpandedString()
        if len(code) == 0:
            continue
        
        save_wind = show_UI.showUI(save_window.SaveWindow, SnippetType.python)
        text = save_wind.getText()
        comment = save_wind.getComment()
        if text is None:
            continue

        save_snippet.savePythonToDisk(text, code, comment)

                    ]]>
                    </scriptCode>
            </scriptItem>

            <scriptItem id = "h.pane.parms.dolag.import_snippet">
                <label>Import Snippet</label>
                <expression>isinstance(kwargs['parms'][0].parmTemplate(), hou.StringParmTemplate)</expression>
                    <scriptCode><![CDATA[
import hou
import sys
from parm_menu import import_snippet, import_snippet_UI
from _utils import show_UI
from _utils.code_type import SnippetType, VexType

parms = kwargs['parms']

for parm in parms:
    # just save snippet
    if parm.name() == 'snippet':
        code = parm.unexpandedString()
        func_dict = import_snippet.searchVexList()
        import_wind = show_UI.showUI(import_snippet_UI.ImportWindow, func_dict, SnippetType.vex)
        import_snippet = import_wind.getSnippet()
        if import_snippet:
            code = import_snippet + code
        
        parm.set(code)

    elif parm.name() == 'python':
        code = parm.unexpandedString()
        func_dict = import_snippet.searchPythonList()
        import_wind = show_UI.showUI(import_snippet_UI.ImportWindow, func_dict, SnippetType.python)
        import_snippet = import_wind.getSnippet()
        if import_snippet:
            code = import_snippet + code

        parm.set(code)

                    ]]>
                    </scriptCode>
            </scriptItem>

            <separatorItem id="h.pane.parms.dolag.sep_0"/>

            <scriptItem id = "h.pane.parms.dolag.copy_button">
                <label>Copy Button</label>
                <expression>isinstance(kwargs['parms'][0].parmTemplate(), hou.ButtonParmTemplate)</expression>
                    <scriptCode><![CDATA[
import hou
from parm_menu import copy_button

parms = kwargs['parms']
for parm in parms:
    if isinstance(parm.parmTemplate(), hou.ButtonParmTemplate):
        copy_button.copyButtonToClipboard(parm)
        break
                    ]]>
                    </scriptCode>
            </scriptItem>

            <scriptItem id = "h.pane.parms.dolag.paste_button">
                <expression>isinstance(kwargs['parms'][0].parmTemplate(), hou.ButtonParmTemplate)</expression>
                <label>Paste Button</label>
                    <scriptCode><![CDATA[
import hou
from parm_menu import copy_button

parms = kwargs['parms']
for parm in parms:
    if isinstance(parm.parmTemplate(), hou.ButtonParmTemplate):
        copy_button.pasteButtonFromClipboard(parm)
        break
                    ]]>
                    </scriptCode>
            </scriptItem>

            <scriptItem id = "h.pane.parms.dolag.copy_global_seed">
                <expression>isinstance(kwargs['parms'][0].parmTemplate(), hou.IntParmTemplate) or isinstance(kwargs['parms'][0].parmTemplate(), hou.FloatParmTemplate)</expression>
                <label>Copy Global Seed</label>
                    <scriptCode><![CDATA[
import hou
from parm_menu import global_seed

parms = kwargs['parms']
for parm in parms:
    if isinstance(parm.parmTemplate(), hou.IntParmTemplate) or isinstance(parm.parmTemplate(), hou.FloatParmTemplate):
        global_seed.copyGlobalParamToClipboard(parm)
        break
                    ]]>
                    </scriptCode>
            </scriptItem>

            <scriptItem id = "h.pane.parms.dolag.paste_global_seed">
                <expression>isinstance(kwargs['parms'][0].parmTemplate(), hou.IntParmTemplate) or isinstance(kwargs['parms'][0].parmTemplate(), hou.FloatParmTemplate)</expression>
                <label>Paste Global Seed</label>
                    <scriptCode><![CDATA[
import hou
from parm_menu import global_seed

parms = kwargs['parms']
for parm in parms:
    if isinstance(parm.parmTemplate(), hou.IntParmTemplate) or isinstance(parm.parmTemplate(), hou.FloatParmTemplate):
        global_seed.pasteGlobalParamFromClipboard(parm)
        break
                    ]]>
                    </scriptCode>
            </scriptItem>

            <separatorItem id="h.pane.parms.dolag.sep_1"/>

            <subMenu id = "h.pane.parms.dolag.ramp_interpolation">
                <label>Set Ramp Interpolation</label>
                <expression>isinstance(kwargs['parms'][0].parmTemplate(), hou.RampParmTemplate)</expression>
                <scriptItem id = "h.pane.parms.dolag.ramp_interpolation.CatmullRom">
                    <label>CatmullRom</label>
                    <scriptCode><![CDATA[
import hou
from parm_menu import ramp

parms = kwargs['parms']
for parm in parms:
    base = hou.rampBasis.CatmullRom
    ramp.setRampInterpolation(parm, base)
                    ]]>
                    </scriptCode>
                </scriptItem>

                <scriptItem id = "h.pane.parms.dolag.ramp_interpolation.BSpline">
                    <label>BSpline</label>
                    <scriptCode><![CDATA[
import hou
from parm_menu import ramp

parms = kwargs['parms']
for parm in parms:
    base = hou.rampBasis.BSpline
    ramp.setRampInterpolation(parm, base)
                    ]]>
                    </scriptCode>
                </scriptItem>

                <scriptItem id = "h.pane.parms.dolag.ramp_interpolation.Bezier">
                    <label>Bezier</label>
                    <scriptCode><![CDATA[
import hou
from parm_menu import ramp

parms = kwargs['parms']
for parm in parms:
    base = hou.rampBasis.Bezier
    ramp.setRampInterpolation(parm, base)
                    ]]>
                    </scriptCode>
                </scriptItem>

                <scriptItem id = "h.pane.parms.dolag.ramp_interpolation.Constant">
                    <label>Constant</label>
                    <scriptCode><![CDATA[
import hou
from parm_menu import ramp

parms = kwargs['parms']
for parm in parms:
    base = hou.rampBasis.Constant
    ramp.setRampInterpolation(parm, base)
                    ]]>
                    </scriptCode>
                </scriptItem>

                <scriptItem id = "h.pane.parms.dolag.ramp_interpolation.Hermite">
                    <label>Hermite</label>
                    <scriptCode><![CDATA[
import hou
from parm_menu import ramp

parms = kwargs['parms']
for parm in parms:
    base = hou.rampBasis.Hermite
    ramp.setRampInterpolation(parm, base)
                    ]]>
                    </scriptCode>
                </scriptItem>

                <scriptItem id = "h.pane.parms.dolag.ramp_interpolation.Linear">
                    <label>Linear</label>
                    <scriptCode><![CDATA[
import hou
from parm_menu import ramp

parms = kwargs['parms']
for parm in parms:
    base = hou.rampBasis.Linear
    ramp.setRampInterpolation(parm, base)
                    ]]>
                    </scriptCode>
                </scriptItem>

                <scriptItem id = "h.pane.parms.dolag.ramp_interpolation.MonotoneCubic">
                    <label>MonotoneCubic</label>
                    <scriptCode><![CDATA[
import hou
from parm_menu import ramp

parms = kwargs['parms']
for parm in parms:
    base = hou.rampBasis.MonotoneCubic
    ramp.setRampInterpolation(parm, base)
                    ]]>
                    </scriptCode>
                </scriptItem>
            </subMenu>

            <subMenu id = "h.pane.parms.dolag.mirror_ramp">
                <label>Mirror Ramp</label>
                <expression>isinstance(kwargs['parms'][0].parmTemplate(), hou.RampParmTemplate)</expression>
                <scriptItem id = "h.pane.parms.dolag.mirror_ramp.left_to_right">
                    <label>Left To Right</label>
                    <scriptCode><![CDATA[
import hou
from parm_menu import ramp

parms = kwargs['parms']
for parm in parms:
    ramp.mirrorRamp(parm, 1)
                    ]]>
                    </scriptCode>
                </scriptItem>

                <scriptItem id = "h.pane.parms.dolag.mirror_ramp.right_to_left">
                    <label>Right To Left</label>
                    <scriptCode><![CDATA[
import hou
from parm_menu import ramp

parms = kwargs['parms']
for parm in parms:
    ramp.mirrorRamp(parm, 0)

                    ]]>
                    </scriptCode>
                </scriptItem>
            </subMenu>

            <subMenu id = "h.pane.parms.dolag.process_ramp">
                <label>Process Ramp</label>
                <expression>isinstance(kwargs['parms'][0].parmTemplate(), hou.RampParmTemplate)</expression>

                    <scriptItem id = "h.pane.parms.dolag.randomize_ramp0_25">
                        <label>Randomize Ramp * 0.25</label>
                            <scriptCode><![CDATA[
import hou
from parm_menu import ramp

parms = kwargs['parms']
for parm in parms:
    ramp.randomizeRamp(parm, 0.05)

                            ]]>
                            </scriptCode>
                    </scriptItem>

                    <scriptItem id = "h.pane.parms.dolag.randomize_ramp0_5">
                        <label>Randomize Ramp * 0.5</label>
                            <scriptCode><![CDATA[
import hou
from parm_menu import ramp

parms = kwargs['parms']
for parm in parms:
    ramp.randomizeRamp(parm, 0.1)

                            ]]>
                            </scriptCode>
                    </scriptItem>

                    <scriptItem id = "h.pane.parms.dolag.randomize_ramp">
                        <label>Randomize Ramp</label>
                            <scriptCode><![CDATA[
import hou
from parm_menu import ramp

parms = kwargs['parms']
for parm in parms:
    ramp.randomizeRamp(parm)

                            ]]>
                            </scriptCode>
                    </scriptItem>

                    <scriptItem id = "h.pane.parms.dolag.randomize_ramp2">
                        <label>Randomize Ramp * 2</label>
                            <scriptCode><![CDATA[
import hou
from parm_menu import ramp

parms = kwargs['parms']
for parm in parms:
    ramp.randomizeRamp(parm, 0.4)

                            ]]>
                            </scriptCode>
                    </scriptItem>

                    <scriptItem id = "h.pane.parms.dolag.randomize_interval0_5">
                        <label>Randomize Interval * 0.5</label>
                            <scriptCode><![CDATA[
import hou
from parm_menu import ramp

parms = kwargs['parms']
for parm in parms:
    ramp.randomizeIntervalRamp(parm, 0.1)

                            ]]>
                            </scriptCode>
                    </scriptItem>

                    <scriptItem id = "h.pane.parms.dolag.randomize_interval">
                        <label>Randomize Interval</label>
                            <scriptCode><![CDATA[
import hou
from parm_menu import ramp

parms = kwargs['parms']
for parm in parms:
    ramp.randomizeIntervalRamp(parm)

                            ]]>
                            </scriptCode>
                    </scriptItem>

                    <scriptItem id = "h.pane.parms.dolag.randomize_interval2">
                        <label>Randomize Interval * 2</label>
                            <scriptCode><![CDATA[
import hou
from parm_menu import ramp

parms = kwargs['parms']
for parm in parms:
    ramp.randomizeIntervalRamp(parm, 0.4)

                            ]]>
                            </scriptCode>
                    </scriptItem>

                    <scriptItem id = "h.pane.parms.dolag.subdivide_ramp">
                        <label>Subdivide Ramp</label>
                            <scriptCode><![CDATA[
import hou
from parm_menu import ramp

parms = kwargs['parms']
for parm in parms:
    ramp.subdivideRamp(parm)

                            ]]>
                            </scriptCode>
                    </scriptItem>

                    <scriptItem id = "h.pane.parms.dolag.subdivide_ramp2">
                        <label>Subdivide Ramp * 2</label>
                            <scriptCode><![CDATA[
import hou
from parm_menu import ramp

parms = kwargs['parms']
for parm in parms:
    ramp.subdivideRamp(parm, 2)

                            ]]>
                            </scriptCode>
                    </scriptItem>

                    <scriptItem id = "h.pane.parms.dolag.subdivide_ramp4">
                        <label>Subdivide Ramp * 4</label>
                            <scriptCode><![CDATA[
import hou
from parm_menu import ramp

parms = kwargs['parms']
for parm in parms:
    ramp.subdivideRamp(parm, 4)

                            ]]>
                            </scriptCode>
                    </scriptItem>

                    <scriptItem id = "h.pane.parms.dolag.smooth_ramp">
                        <label>Smooth Ramp</label>
                            <scriptCode><![CDATA[
import hou
from parm_menu import ramp

parms = kwargs['parms']
for parm in parms:
    ramp.smoothRamp(parm)

                            ]]>
                            </scriptCode>
                    </scriptItem>

                    <scriptItem id = "h.pane.parms.dolag.smooth_ramp2">
                        <label>Smooth Ramp * 2</label>
                            <scriptCode><![CDATA[
import hou
from parm_menu import ramp

parms = kwargs['parms']
for parm in parms:
    ramp.smoothRamp(parm, 2)

                            ]]>
                            </scriptCode>
                    </scriptItem>

                    <scriptItem id = "h.pane.parms.dolag.smooth_ramp4">
                        <label>Smooth Ramp * 4</label>
                            <scriptCode><![CDATA[
import hou
from parm_menu import ramp

parms = kwargs['parms']
for parm in parms:
    ramp.smoothRamp(parm, 4)

                            ]]>
                            </scriptCode>
                    </scriptItem>

            </subMenu>
        </subMenu>
    </menu>

</menuDocument>